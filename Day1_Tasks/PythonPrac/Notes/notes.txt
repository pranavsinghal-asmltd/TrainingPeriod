""" This file contains all different types of datatypes and variables in python.

#variable creation is as follows
 
x = 2 # x is of int type
x = "String test" # x is of String type 


#type casting
x = int(3)
y = float(3)
z = str(3)
print(x,type(x))
print(y,type(y))
print(z,type(z)) 

x = "John"
# is the same as
x = 'John'

legal variable names: 
myvar = "John"
my_var = "John"
_my_var = "John"
myVar = "John"
MYVAR = "John"
myvar2 = "John"

#Assigning multiple values
x, y, z = "Orange", "Banana", "Cherry"
print(x)
print(y)
print(z)

x = y = z = "Orange"
print(x)
print(y)
print(z)

fruits = ["apple", "banana", "cherry"]
x, y, z = fruits
print(x)
print(y)
print(z) 

Note : While printing u can print multiple variables in same line by seperating them with "," in the print() fn
eg : print(x,y,z)
print(x + y) with concatinate the 2 values if they are string else if in it'll show the sum
print(x + y) wont work if x in int and y is str 

Global Variables
Variables that are created outside of a function (as in all of the examples in the previous pages) are known as global variables.

Global variables can be used by everyone, both inside of functions and outside. 

Example	                                        Data Type
x = "Hello World"	                            str	
x = 20	                                        int	
x = 20.5	                                    float	
x = 1j	                                        complex	
x = ["apple", "banana", "cherry"]	            list	
x = ("apple", "banana", "cherry")	            tuple	
x = range(6)	                                range	
x = {"name" : "John", "age" : 36}	            dict	
x = {"apple", "banana", "cherry"}	            set	
x = frozenset({"apple", "banana", "cherry"})	frozenset	
x = True	                                    bool	
x = b"Hello"	                                bytes	
x = bytearray(5)	                            bytearray	
x = memoryview(bytes(5))	                    memoryview	
x = None	                                    NoneType	


generate random number in a given range: 
import random
print(random.randrange(1, 10))
"""

#Strings: refer the ipynb file
"""
String Escape Characters: 

Code	        Result
\'	            Single Quote	
\\	            Backslash	
\n	            New Line	
\r	            Carriage Return	
\t	            Tab	
\b	            Backspace	
\f	            Form Feed	
\ooo	        Octal value	
\xhh	        Hex value
"""

Method	Description
capitalize()	Converts the first character to upper case
casefold()	Converts string into lower case
center()	Returns a centered string
count()	Returns the number of times a specified value occurs in a string
encode()	Returns an encoded version of the string
endswith()	Returns true if the string ends with the specified value
expandtabs()	Sets the tab size of the string
find()	Searches the string for a specified value and returns the position of where it was found
format()	Formats specified values in a string
format_map()	Formats specified values in a string
index()	Searches the string for a specified value and returns the position of where it was found
isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isascii()	Returns True if all characters in the string are ascii characters
isdecimal()	Returns True if all characters in the string are decimals
isdigit()	Returns True if all characters in the string are digits
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isnumeric()	Returns True if all characters in the string are numeric
isprintable()	Returns True if all characters in the string are printable
isspace()	Returns True if all characters in the string are whitespaces
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case
join()	Joins the elements of an iterable to the end of the string
ljust()	Returns a left justified version of the string
lower()	Converts a string into lower case
lstrip()	Returns a left trim version of the string
maketrans()	Returns a translation table to be used in translations
partition()	Returns a tuple where the string is parted into three parts
replace()	Returns a string where a specified value is replaced with a specified value
rfind()	Searches the string for a specified value and returns the last position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
rjust()	Returns a right justified version of the string
rpartition()	Returns a tuple where the string is parted into three parts
rsplit()	Splits the string at the specified separator, and returns a list
rstrip()	Returns a right trim version of the string
split()	Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
startswith()	Returns true if the string starts with the specified value
strip()	Returns a trimmed version of the string
swapcase()	Swaps cases, lower case becomes upper case and vice versa
title()	Converts the first character of each word to upper case
translate()	Returns a translated string
upper()	Converts a string into upper case
zfill()	Fills the string with a specified number of 0 values at the beginning

List methods: 
Method	Description
append()	Adds an element at the end of the list
clear()	Removes all the elements from the list
copy()	Returns a copy of the list
count()	Returns the number of elements with the specified value
extend()	Add the elements of a list (or any iterable), to the end of the current list
index()	Returns the index of the first element with the specified value
insert()	Adds an element at the specified position
pop()	Removes the element at the specified position
remove()	Removes the item with the specified value
reverse()	Reverses the order of the list
sort()	Sorts the list

Dictionary methods
Method	Description
clear()	Removes all the elements from the dictionary
copy()	Returns a copy of the dictionary
fromkeys()	Returns a dictionary with the specified keys and value
get()	Returns the value of the specified key
items()	Returns a list containing a tuple for each key value pair
keys()	Returns a list containing the dictionary's keys
pop()	Removes the element with the specified key
popitem()	Removes the last inserted key-value pair
setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
update()	Updates the dictionary with the specified key-value pairs
values()	Returns a list of all the values in the dictionary

RegEx
| Token   | Meaning                                 |    |
| ------- | --------------------------------------- | -- |
| `\d`    | digit (0â€“9)                             |    |
| `\w`    | word char (letters, digits, underscore) |    |
| `\s`    | whitespace                              |    |
| `.`     | any character except newline            |    |
| `^`     | start of string                         |    |
| `$`     | end of string                           |    |
| `+`     | 1 or more repetitions                   |    |
| `*`     | 0 or more repetitions                   |    |
| `?`     | optional (0 or 1)                       |    |
| `{n}`   | exactly n repetitions                   |    |
| `{n,m}` | between n and m repetitions             |    |
| \`      | \`                                      | OR |
| `(...)` | group                                   |    |



| **Data Type**         | **Regex Pattern**            | **Example Match**     |                 |
| --------------------- | ---------------------------- | --------------------- | --------------- |
| **Integer**           | `^-?\d+$`                    | `123`, `-456`         |                 |
| **Float**             | `^-?\d*\.\d+$`               | `3.14`, `-0.5`, `.75` |                 |
| **Boolean**           | \`^(True                     | False)$\`             | `True`, `False` |
| **Date (YYYY-MM-DD)** | `^\d{4}-\d{2}-\d{2}$`        | `2025-08-14`          |                 |
| **Time (HH\:MM)**     | `^\d{2}:\d{2}$`              | `14:30`               |                 |
| **Email**             | `^[\w\.-]+@[\w\.-]+\.\w+$`   | `user@example.com`    |                 |
| **Alphanumeric**      | `^[A-Za-z0-9]+$`             | `Hello123`            |                 |
| **Word**              | `^[A-Za-z]+$`                | `Hello`               |                 |
| **IPv4**              | `^(?:\d{1,3}\.){3}\d{1,3}$`  | `192.168.0.1`         |                 |
| **Hex Color**         | `^#(?:[0-9a-fA-F]{3}){1,2}$` | `#fff`, `#1a2b3c`     |                 |

OOP:
OOP stands for Object-Oriented Programming.
Python is an object-oriented language, allowing you to structure your code using classes and objects for better organization and reusability.

- Advantages of OOP
    * Provides a clear structure to programs
    * Makes code easier to maintain, reuse, and debug
    * Helps keep your code DRY (Don't Repeat Yourself)
    * Allows you to build reusable applications with less code
Tip: The DRY principle means you should avoid writing the same code more than once. Move repeated code into functions or classes and reuse it.

- What are Classes and Objects?
Classes and objects are the two core concepts in object-oriented programming.
A class defines what an object should look like, and an object is created based on that class. 
For example:

Class	    Objects
Fruit   	Apple, Banana, Mango
Car	        Volvo, Audi, Toyota

Create a Class
To create a class, use the keyword class:

class MyClass:
  x = 5

Create Object
Now we can use the class named MyClass to create objects:
Example
Create an object named p1, and print the value of x:

p1 = MyClass()
print(p1.x)

The __init__() method:
- used to initialize a class
- by default present in the class
eg:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
p1 = Person("John", 36)
print(p1.name)
print(p1.age)

Note: The __init__() method is called automatically every time the class is being used to create a new object.

The __str__() method:
- controls what should be returned when the class object is represented as a string.
eg:

class Person:
  def __init__(self, name, age):
    self.name = name
    self.age = age
  def __str__(self):
    return f"{self.name}({self.age})"
p1 = Person("John", 36)
print(p1)

output = John(36)

Inheritance:
Inheritance allows us to define a class that inherits all the methods and properties from another class.
Parent class is the class being inherited from, also called base class.
Child class is the class that inherits from another class, also called derived class.


Numpy Data types : 
Below is a list of all data types in NumPy and the characters used to represent them.

i - integer
b - boolean
u - unsigned integer
f - float
c - complex float
m - timedelta
M - datetime
O - object
S - string
U - unicode string
V - fixed chunk of memory for other type ( void )


Code to check data type of the numpy array:
import numpy as np
arr = np.array(['apple', 'banana', 'cherry'])
print(arr.dtype)

